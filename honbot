#!/usr/bin/env python
"""
honbot - A Heroes Of Newerth chatserver Bot
Copyright 2011, Anton Romanov

Heavily inspired by phenny:
Copyright 2008, Sean B. Palmer, inamidst.com

Licensed under the Eiffel Forum License 2.


Note: DO NOT EDIT THIS FILE.
Run ./honbot, then edit ~/.honbot/default.py
Then run ./honbot again
"""

import sys, os, imp, optparse
from textwrap import dedent as trim

dotdir = os.path.expanduser('~/.honbot')

def check_python_version(): 
   if sys.version_info < (2, 4): 
      error = 'Error: Requires Python 2.4 or later, from www.python.org'
      print >> sys.stderr, error
      sys.exit(1)

def create_default_config(fn): 
   f = open(fn, 'w')
   print >> f, trim("""\
   nick = 'honbot'
   channels = ['example', 'Linux']
   owner = 'yournickname'

   password = 'example'
   # These are people who will be able to use admin.py's functions...
   admins = [owner, 'someoneyoutrust']
   # But admin.py is disabled by default, as follows:
   exclude = ['admin','mumble']

   #cooldown for users
   # cooldown = 3
   # means after user sent any command all his consequent commands will be ignored for 3 seconds

   # format strings for honstats plugin
   #MATCH_FORMAT_STRING = '{nick} {hero}[{lvl}] {rating}MMR {outcome} ^g{K}^*/^r{D}^*/^b{A}^* {name}{mode} {len} ^:|^; CK:{ck} CD:{cd} ^:|^; XPM:{xpm:.2f} GPM:{gpm:.2f} ^:|^; WARDS:{wards} ^:|^; {mdt}'
   #PLAYER_STATS_FORMAT = '{nick} {hero} ^g{rating}^*MMR WIN^g{win_percent:.2%}^*({matches} played) ^:|^; Average stats ^r^:=>^*^; len: {avg_len} ^:|^; CK:{avg_ck:.2f} CD:{avg_cd:.2f} ^:|^; XPM:{xpm:.2f} GPM:{gpm:.2f} APM:{apm:.2f} ^:|^; K/D/A ^g{avg_K:.2f}^*/^r{avg_D:.2f}^*/^b{avg_A:.2f}^* ^:|^; WARDS {avg_wards:.2f}'


   # If you want to enumerate a list of modules rather than disabling
   # some, use "enable = ['example']", which takes precedent over exclude
   # 
   # enable = []

   # Directories to load user modules from
   # e.g. /path/to/my/modules
   extra = []

   # Services to load: maps channel names to white or black lists
   external = { 
      'liberal': ['!'], # allow all
      'conservative': [], # allow none
      '*': ['!'] # default whitelist, allow all
   }

   # EOF
   """)
   f.close()

def create_dotdir(dotdir): 
   print 'Creating a config directory at ~/.honbot...'
   try: os.mkdir(dotdir)
   except Exception, e: 
      print >> sys.stderr, 'There was a problem creating %s:' % dotdir
      print >> sys.stderr, e.__class__, str(e)
      print >> sys.stderr, 'Please fix this and then run honbot again.'
      sys.exit(1)

   print 'Creating a default config file at ~/.honbot/default.py...'
   default = os.path.join(dotdir, 'default.py')
   create_default_config(default)

   print 'Done; now you can edit default.py, and run honbot! Enjoy.'
   sys.exit(0)

def check_dotdir(): 
   if not os.path.isdir(dotdir): 
      create_dotdir(dotdir)

def config_names(config): 
   config = config or 'default'

   def files(d): 
      names = os.listdir(d)
      return list(os.path.join(d, fn) for fn in names if fn.endswith('.py'))

   here = os.path.join('.', config)
   if os.path.isfile(here): 
      return [here]
   if os.path.isfile(here + '.py'): 
      return [here + '.py']
   if os.path.isdir(here): 
      return files(here)

   there = os.path.join(dotdir, config)
   if os.path.isfile(there): 
      return [there]
   if os.path.isfile(there + '.py'): 
      return [there + '.py']
   if os.path.isdir(there): 
      return files(there)

   print >> sys.stderr, "Error: Couldn't find a config file!"
   print >> sys.stderr, 'What happened to ~/.honbot/default.py?'
   sys.exit(1)

def main(argv=None): 
   # Step One: Parse The Command Line

   parser = optparse.OptionParser('%prog [options]')
   parser.add_option('-c', '--config', metavar='fn', 
      help='use this configuration file or directory')
   opts, args = parser.parse_args(argv)
   if args: print >> sys.stderr, 'Warning: ignoring spurious arguments'

   # Step Two: Check Dependencies

   check_python_version() # require python2.4 or later
   check_dotdir() # require ~/.honbot, or make it and exit

   # Step Three: Load The Configurations

   config_modules = []
   for config_name in config_names(opts.config): 
      name = os.path.basename(config_name).split('.')[0] + '_config'
      module = imp.load_source(name, config_name)
      module.filename = config_name

      if not hasattr(module, 'prefix'): 
         module.prefix = r'\.'

      if not hasattr(module, 'name'): 
         module.name = 'honbot'

      if not hasattr(module, 'password'): 
         module.password = None


      if not hasattr(module, 'cooldown'): 
         module.cooldown = 3

      config_modules.append(module)

   # Step Four: Load honbot

   try: from __init__ import run
   except ImportError: 
      try: from honbot import run
      except ImportError: 
         print >> sys.stderr, "Error: Couldn't find honbot to import"
         sys.exit(1)

   # Step Five: Initialise And Run The Phennies

   # @@ ignore SIGHUP
   for config_module in config_modules: 
      run(config_module) # @@ thread this

if __name__ == '__main__': 
   abspath = os.path.abspath(__file__)
   dname = os.path.dirname(abspath)
   os.chdir(dname)
   main()
